[ 오늘의 일정 : 11월2일(목) ]
------------------------------
1. 보그 PJ : 회원가입 (아이디중복검사), 로그인기능
   - Ajax 비동기통신으로 코딩 / 서버연결 작업
2. JS학습 : 비동기호출(Ajax)
   (1) Promise
   (2) Await 
3. 제이쿼리 게시판 : 리스트 페이지
   - 로컬 스토리지 연결구현
4. 개인 PJ 작업 및 리뷰시간

[ 개인 프로젝트 ]

- 설계도 
1) 리뷰/장바구니 모바일 와이어프레임 작성 - 완성

- 프로그래밍
(0) 인덱스 페이지 
1) 키보드타이핑/키보드 뿌리기 합치기(이건 뒤에서 흐리게)
2) 화면전환 효과

...1교시...
서버연결 복습

...2교시...
아이디 중복검사(서버)

...3,4교시...
로그인 로그아웃


...5교시...
js비동기 promise

let 약속변수 = new Promise(function(성공함수, 실패함수) {
        // 생성코드 : 시간이 걸리는 코드

        성공함수(리턴값사용가능); // 성공시호출
        실패함수(리턴값사용가능);  // 에러시 호출
        });

        // 사용코드 : 약속객체가 완료될때까지 기다림!!!
        약속변수.then(
        function(변수) { 성공시코드 },
        function(변수) { 실패시코드 }
        );


 [ AJAX 비동기 파일처리 전송객체 ]
        AJAX (Asynchronous Javascript And XML)

        -> XMLHttpRequest객체

        1. 특징:
            (1) 웹서버의 데이터 읽기(페이지로드후)
            (2) 페이지로 리로드하지 않고 웹페이지를
                부분업데이트함
            (3) 백그라운드 웹서버로 데이터 전송기능

        2. 사용법:
            (1) 인스턴스를 생성하여 변수에 할당하여 사용
                예) let ajax = new XMLHttpRequest();

            (2) 인스턴스를 열어서 전송준비를 한다
            -> open(방식,요청URL,아이디,비번,비동기옵션)
            -> 핵심: open(방식,요소URL)
                1) 방식: GET/POST -> GET방식을 더 선호함
                    이유는 가볍고 빠르게 처리함
                    POST방식은 민감한 데이터 처리시 사용!
                2)  요청URL : 
                    웹서버의 페이지나 파일경로주소
                3) 아이디/비번 : 
                    웹서버 접근시 인증이 필요한 경우 사용함
                4) 비동기옵션 : 기본값 true -> 비동기처리
                    -> 아무것도 안쓰면 true로 비동기처리됨!
                    만약 false라고 하면 동기적처리를 함!
                    -> 비동기적으로 처리해야 페이지가
                    멈추지 않고 요청파일만 별도로 처리한다!
                예) ajax.open("GET","https://my.com/my.pdf")

            (3) 비동기전송 후 처리를 위한 로드함수구역 만들기
            -> 
            인스턴스변수.onload = function(){처리소스};

            -> 여기서 onload라는 것은 서버에서 결과를 로드한다는 의미임!
            -> 결과처리 상태값은  : 
                인스턴스변수.status 값으로 한다!

                [ status 결과상태종류 ]
                    1) 200 : "OK" - 처리완료됨
                    2) 403 : "Forbidden" - 파일접근거부
                    3) 404 : "Not Found" - 파일없음
                    -> statusText 로 받으면 위의 문자형으로 리턴한다!

                [ response 결과내용 종류 ]
                    1) responseText : 데이터를 문자형식 받기
                    2) responseXML : 데이터를 XML형식 받기
                    3) responseURL : 데이터 전송 URL 받기

            (4) 오픈 셋팅된 요청객체를 전송한다!
                인스턴스변수.send()
                -> open() -> onload -> send() 순으로 코딩

            [ 웹서버 파일 요청시 주의사항! ]
            1. 요청한 파일이 현재 페이지의 도메인주소와
            다른경우 (이종도메인) XSS공격 등의 이유로
            브라우저에서 이것을 금지하고 있다!
            (일반 XMLHttpRequsest 요청으로 가져오기는
            가능함!)

            2. Promise를 사용하여 파일을 요청하고
            에러발생시 이것을 실패함수로 처리할때
            이종도메인 에러는 Promise의 에러도 발생시키므로
            실패함수처리가 되지 않는다!!!

            3. 이것은 근본적인 브라우저 정책이므로
            해결방법은 같은 도메인의 파일을 요청하는 것이다! (외부도메인 파일을 같은 서버에 저장하여 사용하는 경우가 많다!)

...7교시...

(1) 입력시 : JSON.stringify(배열/객체)
(2) 사용시 : JSON.parse(문자형배열/객체)