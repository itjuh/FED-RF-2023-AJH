[ 배열데이터를 변경하여 다시 배열로 만들기 : map()] : 9/14
    
  배열변수.map((배열값,순번,전체배열)=>{변경코드})
  -> 결과로 변경 된 배열이 리턴 됨

  ex) const arr = ['두현','대희','민희'];
  let arr2 = aa.map(val => val+'씨');
  -> 결과: ['두현씨','대희씨','민희씨'];
  ____________________________________________
  Array.isArray(배열); 
  -> 결과로 true / false가 리턴됨
  ____________________________________________
  -> 새로 만들어진 배열 데이터를 현재 자리에 그대로 출력할 때
  배열메서드 .join(구분자)를 이용하여 배열을 하나의 문자형
  데이터로 만들어 주면 편리하다.
  ex) const aa = ['하하','호호'];
  `<div>${aa.map(val => `<h2>${val}</h2>`).join('')}</div>`
  -> 결과: <div><h2>하하</h2><h2>호호</h2></div>
  -> 구분자가 없는 태그로만 구성 된 최종데이터를 그 자리에 출력 함
  ->>>>잊지말자 맵 조인

[ 배열값 사이에 결합값 넣어서 출력하기 : arr.join(''); ] : 9/14
배열값 출력할 때 배열.join('') 쓰면 연결값이 ''안의 값으로 들어감


[ 젠코딩 ] : 9/14
ul>li>a[href='#']{1차}+.smenu>aside.smbx>h2>(.stit{1차}+a[href='#']{전체보기})+.swrap>dl>dt{2차}+dd>a[href='#']{3차}

-> 결과: <ul>
            <li>
                <a href="#">1차</a>
                <div class="smenu">
                    <aside class="smbx">
                        <h2>
                            <div class="stit">1차</div>
                            <a href="#">전체보기</a>
                            <div class="swrap">
                                <dl>
                                    <dt>2차</dt>
                                    <dd><a href="#">3차</a></dd>
                                </dl>
                            </div>
                        </h2>
                    </aside>
                </div>
            </li>
        </ul>


[[ JavaScript에서 요소의 위치 구하기]]

[ offsetTop / offsetLeft] 
-> 부모자격요소를 기준한 위치값
-> 제이쿼리 position()과 같음

[ getBoundingClientRect() > top / left ] 
-> 스크롤위치를 뺀 화면 기준
-> 제이쿼리의 offset() 과 같은 절대값을 구하려면
스크롤위치값을 본 값에 더해야함!
-> 주로 세로 스크롤을 사용하므로 top값에 스크롤값을 더함
예) 요소.getBoundingClientRect().top + window.scrollY

※ 참고: 바운딩 값은 소수점 아래 많은 자릿수까지 표시하므로
    이것을 소수점자리 제한하여 사용할 수 있다!
    -> toFiexd(자릿수) : 자릿수에 0을 넣으면 소수점 아래버림

    [[ JavaScript에서 요소의 크기 구하기 ]]★

-> 한눈에 보기:
http://jsfiddle.net/y8Y32/25/

[ 가로크기 ]
- clientWidth : 패딩점퍼를 입고 있는 클라이언트님!
    padding을 포함한 폭
- scrollWidth :  가로스크롤내용이 들어가니까 scroll!
    padding을 포함한 화면 상에 표시되지 않은 콘텐츠를 포함한 폭
- offsetWidth : 보더,패딩,세로스크롤바 트랙이 다 들어가니 옵셋!
    border, padding, 세로스크롤바 트랙을 포함한 폭

[ 세로크기 ]
- clientHeight : 패딩점퍼를 입고 있는 클라이언트님!
    padding을 포함한 높이
- scrollHeight :  세로스크롤내용이 들어가니까 scroll!
    padding을 포함한 화면 상에 표시되지 않은 콘텐츠를 포함한 높이
- offsetHeight : 보더,패딩,가로스크롤바 트랙이 다 들어가니 옵셋!
    border, padding, 가로스크롤바 트랙을 포함한 높이

[[ 윈도우 사이즈 가져오기 ]]
window.innerWidth :  스크롤 바를 포함하지 않는 창 너비
window.innerHeight : 스크롤 바를 포함하지 않은 창 높이
window.outerWidth : 스크롤 바를 포함, 창의 너비
window.outerHeight :  스크롤 바를 포함한  창의 높이

[[ 현재 스크롤바 위치값 가져오기 ]]
1. window.scrollY (IE6~11지원안함)
2. document.scrollingElement.scrollTop
3. document.documentElement.scrollTop
4. document.querySelector('html').scrollTop

_____________________________________________________________

[[ 이벤트발생시 위치값 ]]
1. clientX, clientY
    -> 현재 보이는 브라우저 화면이 기준

2. offsetX, offsetY
    -> 이벤트 대상이 기준

3. pageX, pageY
    -> 전체 문서를 기준(스크롤 화면을 포함)

4. screenX, screenY
    -> 모니터 화면을 기준
_____________________________________________________________
[ 가로방향 이동 ]
ul의 부모박스는 세로스크롤 적용해야하니 100vh + 컨텐츠양만큼
컨텐츠ul 가로스크롤 해서 이동시키는건 100vw + 컨텐츠양만큼
li는 등분할
[ 메뉴에 오버 시 움직이는 배경 ]
js실험실 중간스크롤 가로이동

[ 1. 선형그라데이션 ] 9/18_nav07

1) 균등분할 그라데이션
background-image: 
    linear-gradient(방향, 색1,색2,색3,...);
- 방향: to top, to bottom, to right, to left

2) 사용자 지정영역 그라데이션
background-image: 
    linear-gradient(방향, 색1 몇%,색2 몇%,색3 몇%,...);
- 색상 뒤에 한칸 띄어 %수치를 주면 색상영역조정됨

3) 각도 지정 그라데이션
background-image: 
    linear-gradient(각도, 색1,색2,색3,...);
- 각도: 각도수치deg

_____________________________________________

[ 2. 원형 그라데이션 ] 9/18_nav07

- 기본형, 영역지정형은 박스모양을 따라감!

1) 기본형: 중앙중심, 모양은 박스크기에 맞춤
background-image: 
    radial-gradient(색1,색2,색3,...);
- 시작색으로부터 중앙에서 시작됨

2) 영역 지정형:
background-image: 
    radial-gradient(색1 몇%,색2 몇%,색3 몇%,...);
- 색 뒤에 한칸 띄고 %수치로 영역지정함

3) 그라데이션 모양을 원형으로 사용할 경우:
background-image: 
    radial-gradient(circle,색1,색2,색3,...);
- circle 키워드를 첫번째에 사용함

4) 영역옵션 지정형: 중심점 변경
background-image: 
    radial-gradient(옵션 at 가로위치 세로위치,색1,색2,색3,...);
- 옵션4가지 : closest-side / farthest-side
            closest-corner / farthest-corner
            ___________________________________
            - closest는 중심점으로 좀더 모아진것
            - farthest는 중심점에서 멀리 퍼진것
            - side와 corner는 경계선과 끝부분옵션임
- 가로위치, 세로위치 (중심점) - 단위는 px / %

[ video 요소 - html5에서 지원하는 비디오 재생요소 ]

-> img 태그와 비슷하게 쉽게 비디오를 삽입하도록 등장!

((속성들))
1. src : 파일경로
2. controls : 동영상 제어버튼바
    (이게 있으면 화면클릭으로 또는 스페이스바로 재생/멈춤 가능)
3. autoplay : 자동재생(소리없음에서 작동)
4. muted : 소리없음
5. loop : 무한반복재생
6. playsinline : 모바일 ios (아이폰) 동영상 재생시 자동재생 및 동영상이 페이지에 삽입된 상태에서 재생되도록 설정하는 옵션
(안드로이드는 없어도 자동재생 및 삽입재생됨!) 
7. poster : 비디오가 멈춤상태일때 첫화면 이미지
    (값으로 이미지 경로만 쓰면 됨) 
_____________________________________________

[ video 요소의 다른 표현법 ]
- video 하위 source 요소를 사용한 표현법
-> 이런 형식을 쓰는 이유는 같은 비디오가 브라우저에서
지원되는 비디오 형식을 맞추는데 그 목적이 있다!
-> 모든 비디오 형식을 지원하지 않을 경우
source요소 맨 하단의 쓴 글자가 화면에 출력된다!

예시코드)

<video autoplay muted loop>
    <source src="images/cgv.mp4" type="video/mp4">
    <source src="images/cgv.ogg" type="video/ogg">
    <source src="images/cgv.webm" type="video/webm">
    당신의 브라우저는 본 비디오를 재생할 수 없습니다!
</video>
_________________________________________________

[ 비디오 압축형식 ]
1. mp4 - 최신 브라우저에서 지원하는 가장 보편적인
    비디오 압축형식(오디오 전용은 mp3)        
2. ogg - 오픈 표준파일 형식 Xiph.org 재단에서 개발
3. webm - 개방형 미디어 컨테이너. 높은 비디오 재생품질

-> mkv, mov, avi 등과 같이 기존에 사용하던 일반
압축형식은 브라우저에서 지원하지 않는 경우가 많다.
따라서 비디오를 mp4형식으로 변환하여 올리게 좋다!
(유튜브 동영상은 모두 mp4로 변환하여 서비스중이다!)
