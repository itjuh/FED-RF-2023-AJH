[ 오늘의 일정 : 9월19일(화) ]
------------------------------
1. 코드 업데이트
   - JS 모듈
   - JS 패럴렉스
   - 도깨비 PJ : 대표이미지 파트
2. 프로젝트 구현 및 리뷰 시간

[ 프로젝트 일정 ]
18~21일 평일동안
(필수)
안내페이지 제작 1,2,3,4 
-> 데이터 넣기 남음

로그인 회원가입 제작
주문페이지 시작

20일 가이드문서 작성

--------------
할일
(필수) 
안내페이지 이미지 넣기
고객센터 오류고치기
상품 주문하기 넘기기
가이드문서 작성
미디어 오시는길
미디어 고객센터
미디어 안내
미디어 메인
미디어 주문하기

...1교시...
모듈화 : 코드를 별도의 파일로 나눌 수 있음

<script type="module">
import message from "./message.js";
</script>

1. 파일 중복방지
2. 유지보수 관리

리액트에서 주요하게 사용하는 문법임

내보내는 파일***************************
export const name = "Jesse";
export const age = 40;
----------또는-----------------
const name = "Jesse"; //객체로 보내기
const age = 40;

export {name, age};
----------또는-----------------
const message = () => { //함수로 보내기
const name = "Jesse";
const age = 40;
return name + ' is ' + age + 'years old.';
};

export default message;
// 값을 하나 내보내면 default 써야함


불러들이는 파일***************************
import { name, age } from "./person.js";
-----------또는---------------
import message from "./message.js";

js학습 > 03.모듈
모듈을 활용한 구현

let x = ()=>{}; 익명함수 호출하면 리턴함


script로 불러온 파일은 export 안해도 됨(이미 경로로 가져오기때문)

...2교시...
모듈화 계속 main.js

배열 꺼내기 arr[0]
객체 꺼내기 obj['속성명'] or obj.속성명

...3교시...
패럴렉스~ sj실험실-> parallax_PJ

새로고치면 스크롤바 위치 캐싱 후 맨 위로 이동
// 0. 새로고치면 스크롤바 위치 캐싱 후 맨 위로 이동
setTimeout(() => {
    // 윈도우 스크롤 맨 위로!
    window.scrollTo(0,0);
    // 부드러운 스크롤 위치값 반영!(전 위치로 이동해버림)
    setPos(0);
    // 안하면 스크롤 바를 내리고 새로고침하면 원래 위치로 강제이동함
}, 500);

...4교시... 패럴렉스 이해하자!
// 세팅값 변수/////
// 윈도우 높이값
const winH = window.innerHeight;
// 패럴렉스 범위변수
const setH1 = 100, setH2 = 300;


// 3-2. 패럴렉스 이동함수 ///////////////
function moveEl(elPos,ele,setH){
    // 전달변수 
    // (1) elPos - 위치값 getBCL
    // (2) ele - 대상요소
    // (3) setH - 이동할 범위의 높이값(클수록 속도감있게 움직임)

    // console.log('위치',elPos,'\n대상',ele,'\n범위',setH);
    // 패럴렉스 범위 : 윈도우 높이 값 ~ 0 (화면에서 등장한게 getBCR = 윈도우높이)
    // 화면에서 완전히 사라질 때 범위는 0보다 작다(요소크기만큼)
    if(elPos < winH && elPos > -200){
        // 1. 실제요소 위치이동값 계산
            // 실제 이동값 = 위치값*정한범위 / 전체범위
            // let x = (elPos*setH) / winH;
            
        // 실제 이동값 = 정한범위 - (위치값*정한범위 / 전체범위);
        let x = setH - (elPos*setH) / winH;
        console.log('-x : ',-x,window.scrollY);
        // 2. 해당요소의 위치값 이동 CSS 반영하기
        ele.style.transform = `translateY(${-x}px)`;
        // 방향은 top 기준 위쪽방향이므로 음수값

    } /////////////// if //////////////////////

    /**************************************
        [ 패럴렉스 위치 계산 ]
        
        1. 전체범위 : window.innerHeight
        2. 위치값 : getBoundingClientRect().top
        3. 정한범위 : 이동 할 수치 
        4. 실제이동값 : transform:translateY(이동수치px);
        ______________________________________________
        
        ((비례식으로 실제 이동값 알아내기))
        
        전체범위 : 위치값 = 정한범위 : 실제이동값
        실제 이동값 = 위치값*정한범위 / 전체범위

        -> 그.런.데...
        Y축 위치 이동은 처음에 0부터 서서히 커지므로
        이동수치값은 정한범위에서 실제 이동값을 빼야함

        실제 이동값 = 정한범위 - (위치값*정한범위 / 전체범위);

    **************************************/
    /*
    getBCR는 스크롤 내릴수록 작아짐 (요소가 움직이 범위에 대한 변수)
    getBCR는 숫자 작아짐 (화면높이부터~0으로)
    화면이동값 translateY(-스크롤Y(0부터 화면높이로 커짐));
    두 값의 비례식을 위해서 값의 조정이 필요함

    전체범위 : 위치값 = 정한범위 : (정한범위 - 실제이동값)
    */
} ///////////moveEl///////////////////